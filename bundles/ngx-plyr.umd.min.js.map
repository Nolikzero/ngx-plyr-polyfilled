{"version":3,"sources":["ng://ngx-plyr/lib/plyr-driver/default-plyr-driver.ts","ng://ngx-plyr/lib/plyr/plyr.component.ts","ng://ngx-plyr/lib/plyr.module.ts"],"names":["DefaultPlyrDriver","prototype","create","params","Plyr","videoElement","options","updateSource","plyr","source","destroy","PlyrComponent","elementRef","ngZone","renderer","this","playerChange","BehaviorSubject","events","Map","plyrType","plyrInit","pipe","filter","player","plyrProgress","createLazyEvent","plyrPlaying","plyrPlay","plyrPause","plyrTimeUpdate","plyrVolumeChange","plyrSeeking","plyrSeeked","plyrRateChange","plyrEnded","plyrEnterFullScreen","plyrExitFullScreen","plyrCaptionsEnabled","plyrCaptionsDisabled","plyrLanguageChange","plyrControlsHidden","plyrControlsShown","plyrReady","plyrLoadStart","plyrLoadedData","plyrLoadedMetadata","plyrQualityChange","plyrCanPlay","plyrCanPlayThrough","plyrStalled","plyrWaiting","plyrEmptied","plyrCueChange","plyrError","plyrStateChange","subscriptions","Object","defineProperty","getValue","ngOnChanges","changes","_this","push","first","subscribe","reinitTriggers","plyrOptions","plyrPlaysInline","plyrCrossOrigin","t","length","some","firstChange","initPlyr","updatePlyrSource","ngOnDestroy","destroyPlayer","forEach","s","unsubscribe","ngAfterViewInit","force","runOutsideAngular","driver","plyrDriver","ensureVideoElement","newPlayer","next","type","title","plyrTitle","sources","plyrSources","poster","plyrPoster","tracks","plyrTracks","name","switchMap","Observable","observer","on","data","run","Array","from","keys","off","nativeElement","hostElement","querySelector","createElement","controls","setAttribute","appendChild","handler","set","get","delete","Component","args","selector","template","exportAs","ElementRef","NgZone","Renderer2","Input","ViewChild","static","Output","PlyrModule","NgModule","declarations","exports"],"mappings":"sbAAA,IAAAA,EAAA,WAGA,SAAAA,KAcA,OAZEA,EAAAC,UAAAC,OAAA,SAAOC,GACL,OAAO,IAAIC,EAAKD,EAAOE,aAAcF,EAAOG,UAG9CN,EAAAC,UAAAM,aAAA,SAAaJ,GACXA,EAAOK,KAAKC,OAASN,EAAOM,QAG9BT,EAAAC,UAAAS,QAAA,SAAQP,GACNA,EAAOK,KAAKE,WAGhBV,EAjBA,GCAAW,EAAA,WAwFE,SAAAA,EACUC,EACAC,EACAC,GAFAC,KAAAH,WAAAA,EACAG,KAAAF,OAAAA,EACAE,KAAAD,SAAAA,EA5EFC,KAAAC,aAAe,IAAIC,EAAAA,gBAAsB,MAMzCF,KAAAG,OAAS,IAAIC,IAIZJ,KAAAK,SAA2B,QAmB1BL,KAAAM,SAAWN,KAAKC,aAAaM,KAAKC,EAAAA,OAAM,SAACC,GAAU,QAAEA,KAGrDT,KAAAU,aAAeV,KAAKW,gBAAgB,YACpCX,KAAAY,YAAcZ,KAAKW,gBAAgB,WACnCX,KAAAa,SAAWb,KAAKW,gBAAgB,QAChCX,KAAAc,UAAYd,KAAKW,gBAAgB,SACjCX,KAAAe,eAAiBf,KAAKW,gBAAgB,cACtCX,KAAAgB,iBAAmBhB,KAAKW,gBAAgB,gBACxCX,KAAAiB,YAAcjB,KAAKW,gBAAgB,WACnCX,KAAAkB,WAAalB,KAAKW,gBAAgB,UAClCX,KAAAmB,eAAiBnB,KAAKW,gBAAgB,cACtCX,KAAAoB,UAAYpB,KAAKW,gBAAgB,SACjCX,KAAAqB,oBAAsBrB,KAAKW,gBAAgB,mBAC3CX,KAAAsB,mBAAqBtB,KAAKW,gBAAgB,kBAC1CX,KAAAuB,oBAAsBvB,KAAKW,gBAAgB,mBAC3CX,KAAAwB,qBAAuBxB,KAAKW,gBAAgB,oBAC5CX,KAAAyB,mBAAqBzB,KAAKW,gBAAgB,kBAC1CX,KAAA0B,mBAAqB1B,KAAKW,gBAAgB,kBAC1CX,KAAA2B,kBAAoB3B,KAAKW,gBAAgB,iBACzCX,KAAA4B,UAAY5B,KAAKW,gBAAgB,SAGjCX,KAAA6B,cAAgB7B,KAAKW,gBAAgB,aACrCX,KAAA8B,eAAiB9B,KAAKW,gBAAgB,cACtCX,KAAA+B,mBAAqB/B,KAAKW,gBAAgB,kBAC1CX,KAAAgC,kBAAoBhC,KAAKW,gBAAgB,iBACzCX,KAAAiC,YAAcjC,KAAKW,gBAAgB,WACnCX,KAAAkC,mBAAqBlC,KAAKW,gBAAgB,kBAC1CX,KAAAmC,YAAcnC,KAAKW,gBAAgB,WACnCX,KAAAoC,YAAcpC,KAAKW,gBAAgB,WACnCX,KAAAqC,YAAcrC,KAAKW,gBAAgB,WACnCX,KAAAsC,cAAgBtC,KAAKW,gBAAgB,aACrCX,KAAAuC,UAAYvC,KAAKW,gBAAgB,SAGjCX,KAAAwC,gBAAkBxC,KAAKW,gBAAgB,eAEzCX,KAAAyC,cAAgC,GA+H1C,OAhMEC,OAAAC,eAAI/C,EAAAV,UAAA,SAAM,KAAV,WACE,OAAOc,KAAKC,aAAa2C,4CA6E3BhD,EAAAV,UAAA2D,YAAA,SAAYC,GAAZ,IAAAC,EAAA/C,KACEA,KAAKyC,cAAcO,KAAKhD,KAAKM,SAASC,KAAK0C,EAAAA,SAASC,UAAS,SAAEzC,OACvD0C,EAAiB,CAACL,EAAQM,YAAaN,EAAQO,gBAAiBP,EAAQQ,iBAAiB9C,OAAM,SAAC+C,GAAK,QAAEA,IAEzGJ,EAAeK,OACbL,EAAeM,KAAI,SAACF,GAAK,OAACA,EAAEG,eAC9BX,EAAKY,UAAS,GAGhBZ,EAAKa,iBAAiBnD,OAK5Bb,EAAAV,UAAA2E,YAAA,WACE7D,KAAK8D,gBACL9D,KAAKyC,cAAcsB,QAAO,SAACC,GAAK,OAAAA,EAAEC,iBAGpCrE,EAAAV,UAAAgF,gBAAA,WACElE,KAAK2D,YAGC/D,EAAAV,UAAAyE,SAAR,SAAiBQ,GAAjB,IAAApB,EAAA/C,UAAiB,IAAAmE,IAAAA,GAAA,IACXA,GAAUnE,KAAKS,QACjBT,KAAKF,OAAOsE,kBAAiB,WAC3BrB,EAAKe,gBAELf,EAAKsB,OAAStB,EAAKuB,YAAc,IAAIrF,EAErC8D,EAAKwB,yBAECC,EAAYzB,EAAKsB,OAAOlF,OAAO,CACnCG,aAAcyD,EAAKzD,aACnBC,QAASwD,EAAKK,cAGhBL,EAAKa,iBAAiBY,GAEtBzB,EAAK9C,aAAawE,KAAKD,MAKrB5E,EAAAV,UAAA0E,iBAAR,SAAyBnE,GACvBO,KAAKqE,OAAO7E,aAAa,CACvBF,aAAcU,KAAKV,aACnBG,KAAIA,EACJC,OAAQ,CACNgF,KAAM1E,KAAKK,SACXsE,MAAO3E,KAAK4E,UACZC,QAAS7E,KAAK8E,YACdC,OAAQ/E,KAAKgF,WACbC,OAAQjF,KAAKkF,eAMXtF,EAAAV,UAAAyB,gBAAR,SAAkDwE,GAAlD,IAAApC,EAAA/C,KACE,OAAOA,KAAKM,SAASC,KACnB6E,EAAAA,UAAS,WAAO,OAAA,IAAIC,EAAAA,WAAU,SAACC,GAAY,OAAAvC,EAAKwC,GAAGJ,EAAI,SAAGK,GAAY,OAAAzC,EAAKjD,OAAO2F,IAAG,WAAO,OAAAH,EAASb,KAAKe,aAItG5F,EAAAV,UAAA4E,cAAR,WAAA,IAAAf,EAAA/C,KACMA,KAAKS,SACPiF,MAAMC,KAAK3F,KAAKG,OAAOyF,QAAQ7B,QAAO,SAACoB,GAAQ,OAAApC,EAAK8C,IAAIV,KAExDnF,KAAKqE,OAAO1E,QAAQ,CAClBF,KAAMO,KAAKS,SAGbT,KAAKV,aAAe,OAIxBoD,OAAAC,eAAY/C,EAAAV,UAAA,cAAW,KAAvB,WACE,OAAOc,KAAKH,WAAWiG,+CAKjBlG,EAAAV,UAAAqF,mBAAR,eACQjF,EAAeU,KAAK+F,YAAYC,cAAc,SAEhD1G,EACFU,KAAKV,aAAeA,GAEpBU,KAAKV,aAAeU,KAAKD,SAASkG,cAAc,SAChDjG,KAAKV,aAAa4G,UAAW,EAEzBlG,KAAKsD,iBACPtD,KAAKV,aAAa6G,aAAa,cAAe,IAG5CnG,KAAKqD,iBACPrD,KAAKV,aAAa6G,aAAa,cAAe,IAGhDnG,KAAKD,SAASqG,YAAYpG,KAAK+F,YAAa/F,KAAKV,gBAI7CM,EAAAV,UAAAqG,GAAR,SAAWJ,EAAckB,GACvBrG,KAAKG,OAAOmG,IAAInB,EAAMkB,GACtBrG,KAAKS,OAAO8E,GAAE,EAAcc,IAGtBzG,EAAAV,UAAA2G,IAAR,SAAYV,GACVnF,KAAKS,OAAOoF,IAAG,EAAc7F,KAAKG,OAAOoG,IAAIpB,IAC7CnF,KAAKG,OAAOqG,UAAOrB,wBAvMtBsB,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,eACVC,SAAA,GAEAC,SAAU,gEAXuBC,EAAAA,kBAAiCC,EAAAA,cAAsCC,EAAAA,iDAuBvGC,EAAAA,wBAEAA,EAAAA,yBAEAA,EAAAA,0BAEAA,EAAAA,2BAEAA,EAAAA,0BAEAA,EAAAA,2BAEAA,EAAAA,+BAEAA,EAAAA,+BAEAA,EAAAA,kBAEAC,EAAAA,UAASR,KAAA,CAAC,IAAK,CAAES,UAAQ,sBAGzBC,EAAAA,6BAGAA,EAAAA,4BACAA,EAAAA,yBACAA,EAAAA,0BACAA,EAAAA,+BACAA,EAAAA,iCACAA,EAAAA,4BACAA,EAAAA,2BACAA,EAAAA,+BACAA,EAAAA,0BACAA,EAAAA,oCACAA,EAAAA,mCACAA,EAAAA,oCACAA,EAAAA,qCACAA,EAAAA,mCACAA,EAAAA,mCACAA,EAAAA,kCACAA,EAAAA,0BACAA,EAAAA,8BAGAA,EAAAA,+BACAA,EAAAA,mCACAA,EAAAA,kCACAA,EAAAA,4BACAA,EAAAA,mCACAA,EAAAA,4BACAA,EAAAA,4BACAA,EAAAA,4BACAA,EAAAA,8BACAA,EAAAA,0BACAA,EAAAA,gCAGAA,EAAAA,UAiIHxH,EAjNA,GCAAyH,EAAA,WAGA,SAAAA,KAQ0B,2BARzBC,EAAAA,SAAQZ,KAAA,CAAC,CACRa,aAAc,CACZ3H,GAEF4H,QAAS,CACP5H,OAGsByH,EAX1B","sourcesContent":["import Plyr from 'plyr';\nimport { PlyrDriver, PlyrDriverCreateParams, PlyrDriverDestroyParams, PlyrDriverUpdateSourceParams } from './plyr-driver';\n\nexport class DefaultPlyrDriver implements PlyrDriver {\n\n  create(params: PlyrDriverCreateParams) {\n    return new Plyr(params.videoElement, params.options);\n  }\n\n  updateSource(params: PlyrDriverUpdateSourceParams) {\n    params.plyr.source = params.source;\n  }\n\n  destroy(params: PlyrDriverDestroyParams) {\n    params.plyr.destroy();\n  }\n\n}\n","import { AfterViewInit, Component, ElementRef, EventEmitter, Input, NgZone, OnChanges, OnDestroy, Output, Renderer2, SimpleChange, ViewChild } from '@angular/core';\nimport Plyr from 'plyr';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { filter, first, switchMap } from 'rxjs/operators';\nimport { DefaultPlyrDriver } from '../plyr-driver/default-plyr-driver';\nimport { PlyrDriver } from '../plyr-driver/plyr-driver';\n\n@Component({\n  selector: 'plyr, [plyr]', // tslint:disable-line\n  templateUrl: './plyr.component.html',\n  styleUrls: ['./plyr.component.css'],\n  exportAs: 'plyr'\n})\nexport class PlyrComponent implements AfterViewInit, OnChanges, OnDestroy {\n\n  private playerChange = new BehaviorSubject<Plyr>(null);\n\n  get player(): Plyr {\n    return this.playerChange.getValue();\n  }\n\n  private events = new Map();\n\n  @Input() plyrDriver: PlyrDriver;\n\n  @Input() plyrType: Plyr.MediaType = 'video';\n\n  @Input() plyrTitle: string;\n\n  @Input() plyrPoster: string;\n\n  @Input() plyrSources: Plyr.Source[];\n\n  @Input() plyrTracks: Plyr.Track[];\n\n  @Input() plyrOptions: Plyr.Options;\n\n  @Input() plyrCrossOrigin: boolean;\n\n  @Input() plyrPlaysInline: boolean;\n\n  @ViewChild('v', { static: false }) private vr: ElementRef;\n\n  // ngx-plyr events\n  @Output() plyrInit = this.playerChange.pipe(filter(player => !!player)) as EventEmitter<Plyr>;\n\n  // standard media events\n  @Output() plyrProgress = this.createLazyEvent('progress');\n  @Output() plyrPlaying = this.createLazyEvent('playing');\n  @Output() plyrPlay = this.createLazyEvent('play');\n  @Output() plyrPause = this.createLazyEvent('pause');\n  @Output() plyrTimeUpdate = this.createLazyEvent('timeupdate');\n  @Output() plyrVolumeChange = this.createLazyEvent('volumechange');\n  @Output() plyrSeeking = this.createLazyEvent('seeking');\n  @Output() plyrSeeked = this.createLazyEvent('seeked');\n  @Output() plyrRateChange = this.createLazyEvent('ratechange');\n  @Output() plyrEnded = this.createLazyEvent('ended');\n  @Output() plyrEnterFullScreen = this.createLazyEvent('enterfullscreen');\n  @Output() plyrExitFullScreen = this.createLazyEvent('exitfullscreen');\n  @Output() plyrCaptionsEnabled = this.createLazyEvent('captionsenabled');\n  @Output() plyrCaptionsDisabled = this.createLazyEvent('captionsdisabled');\n  @Output() plyrLanguageChange = this.createLazyEvent('languagechange');\n  @Output() plyrControlsHidden = this.createLazyEvent('controlshidden');\n  @Output() plyrControlsShown = this.createLazyEvent('controlsshown');\n  @Output() plyrReady = this.createLazyEvent('ready');\n\n  // HTML5 events\n  @Output() plyrLoadStart = this.createLazyEvent('loadstart');\n  @Output() plyrLoadedData = this.createLazyEvent('loadeddata');\n  @Output() plyrLoadedMetadata = this.createLazyEvent('loadedmetadata');\n  @Output() plyrQualityChange = this.createLazyEvent('qualitychange');\n  @Output() plyrCanPlay = this.createLazyEvent('canplay');\n  @Output() plyrCanPlayThrough = this.createLazyEvent('canplaythrough');\n  @Output() plyrStalled = this.createLazyEvent('stalled');\n  @Output() plyrWaiting = this.createLazyEvent('waiting');\n  @Output() plyrEmptied = this.createLazyEvent('emptied');\n  @Output() plyrCueChange = this.createLazyEvent('cuechange');\n  @Output() plyrError = this.createLazyEvent('error');\n\n  // YouTube events\n  @Output() plyrStateChange = this.createLazyEvent('statechange');\n\n  private subscriptions: Subscription[] = [];\n\n  private driver: PlyrDriver;\n\n  private videoElement: HTMLVideoElement;\n\n  constructor(\n    private elementRef: ElementRef<HTMLDivElement>,\n    private ngZone: NgZone,\n    private renderer: Renderer2,\n  ) {\n  }\n\n  ngOnChanges(changes: { [p in keyof PlyrComponent]?: SimpleChange; }) {\n    this.subscriptions.push(this.plyrInit.pipe(first()).subscribe((player: Plyr) => {\n      const reinitTriggers = [changes.plyrOptions, changes.plyrPlaysInline, changes.plyrCrossOrigin].filter(t => !!t);\n\n      if (reinitTriggers.length) {\n        if (reinitTriggers.some(t => !t.firstChange)) {\n          this.initPlyr(true);\n        }\n      } else {\n        this.updatePlyrSource(player);\n      }\n    }));\n  }\n\n  ngOnDestroy() {\n    this.destroyPlayer();\n    this.subscriptions.forEach(s => s.unsubscribe());\n  }\n\n  ngAfterViewInit() {\n    this.initPlyr();\n  }\n\n  private initPlyr(force = false) {\n    if (force || !this.player) {\n      this.ngZone.runOutsideAngular(() => {\n        this.destroyPlayer();\n\n        this.driver = this.plyrDriver || new DefaultPlyrDriver();\n\n        this.ensureVideoElement();\n\n        const newPlayer = this.driver.create({\n          videoElement: this.videoElement,\n          options: this.plyrOptions,\n        });\n\n        this.updatePlyrSource(newPlayer);\n\n        this.playerChange.next(newPlayer);\n      });\n    }\n  }\n\n  private updatePlyrSource(plyr: Plyr) {\n    this.driver.updateSource({\n      videoElement: this.videoElement,\n      plyr,\n      source: {\n        type: this.plyrType,\n        title: this.plyrTitle,\n        sources: this.plyrSources,\n        poster: this.plyrPoster,\n        tracks: this.plyrTracks,\n      },\n    });\n  }\n\n  // see https://stackoverflow.com/a/53704102/1990451\n  private createLazyEvent<T extends Plyr.PlyrEvent>(name: Plyr.StandardEvent | Plyr.Html5Event | Plyr.YoutubeEvent): EventEmitter<T> {\n    return this.plyrInit.pipe(\n      switchMap(() => new Observable(observer => this.on(name, (data: T) => this.ngZone.run(() => observer.next(data)))))\n    ) as EventEmitter<T>;\n  }\n\n  private destroyPlayer() {\n    if (this.player) {\n      Array.from(this.events.keys()).forEach(name => this.off(name));\n\n      this.driver.destroy({\n        plyr: this.player,\n      });\n\n      this.videoElement = null;\n    }\n  }\n\n  private get hostElement() {\n    return this.elementRef.nativeElement;\n  }\n\n  // this method is required because the plyr inserts clone of the original element on destroy\n  // so we catch the clone element right here and reuse it\n  private ensureVideoElement() {\n    const videoElement = this.hostElement.querySelector('video');\n\n    if (videoElement) {\n      this.videoElement = videoElement;\n    } else {\n      this.videoElement = this.renderer.createElement('video');\n      this.videoElement.controls = true;\n\n      if (this.plyrCrossOrigin) {\n        this.videoElement.setAttribute('crossorigin', '');\n      }\n\n      if (this.plyrPlaysInline) {\n        this.videoElement.setAttribute('playsinline', '');\n      }\n\n      this.renderer.appendChild(this.hostElement, this.videoElement);\n    }\n  }\n\n  private on(name: string, handler: any) {\n    this.events.set(name, handler);\n    this.player.on(name as any, handler);\n  }\n\n  private off(name: string) {\n    this.player.off(name as any, this.events.get(name));\n    this.events.delete(name);\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { PlyrComponent } from './plyr/plyr.component';\n\n@NgModule({\n  declarations: [\n    PlyrComponent,\n  ],\n  exports: [\n    PlyrComponent,\n  ]\n})\nexport class PlyrModule { }\n"]}